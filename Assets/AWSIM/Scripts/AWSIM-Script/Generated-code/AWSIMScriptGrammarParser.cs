//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/AWSIMScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AWSIMScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, STRING=30, SIGN=31, 
		NUMBER=32, ID=33, WS=34, LINE_COMMENT=35;
	public const int
		RULE_positionExp = 0, RULE_roadExp = 1, RULE_configExp = 2, RULE_egoSettingExp = 3, 
		RULE_simulationSettingExp = 4, RULE_functionExp = 5, RULE_arrayExp = 6, 
		RULE_argumentList = 7, RULE_assignmentStm = 8, RULE_variableExp = 9, RULE_expression = 10, 
		RULE_statement = 11, RULE_scenario = 12, RULE_stringExp = 13, RULE_numberExp = 14, 
		RULE_idExp = 15;
	public static readonly string[] ruleNames = {
		"positionExp", "roadExp", "configExp", "egoSettingExp", "simulationSettingExp", 
		"functionExp", "arrayExp", "argumentList", "assignmentStm", "variableExp", 
		"expression", "statement", "scenario", "stringExp", "numberExp", "idExp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'at'", "'back'", "'forward'", "'left'", "'right'", "'max-velocity'", 
		"'('", "')'", "'change-lane'", "'longitudinal-velocity'", "'lateral-velocity'", 
		"'velocity'", "','", "'with'", "'dx'", "'aggressive-driving'", "'acceleration'", 
		"'deceleration'", "'delay-spawn'", "'delay-move'", "'delay-spawn-until-ego-move'", 
		"'delay-move-until-ego-move'", "'delay-spawn-until-ego-engaged'", "'delay-move-until-ego-engaged'", 
		"'saving-timeout'", "'['", "']'", "'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "STRING", "SIGN", "NUMBER", "ID", 
		"WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AWSIMScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AWSIMScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AWSIMScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AWSIMScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PositionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionExpContext positionExp() {
			return GetRuleContext<PositionExpContext>(0);
		}
		public PositionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionExpContext positionExp() {
		return positionExp(0);
	}

	private PositionExpContext positionExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PositionExpContext _localctx = new PositionExpContext(Context, _parentState);
		PositionExpContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_positionExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 33;
				stringExp();
				State = 36;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 34;
					Match(T__0);
					State = 35;
					numberExp();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 38;
				variableExp();
				State = 39;
				Match(T__1);
				State = 40;
				numberExp();
				}
				break;
			case 3:
				{
				State = 42;
				variableExp();
				State = 43;
				Match(T__2);
				State = 44;
				numberExp();
				}
				break;
			case 4:
				{
				State = 46;
				variableExp();
				State = 47;
				Match(T__3);
				State = 48;
				numberExp();
				}
				break;
			case 5:
				{
				State = 50;
				variableExp();
				State = 51;
				Match(T__4);
				State = 52;
				numberExp();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 70;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 68;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new PositionExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_positionExp);
						State = 56;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 57;
						Match(T__1);
						State = 58;
						numberExp();
						}
						break;
					case 2:
						{
						_localctx = new PositionExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_positionExp);
						State = 59;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 60;
						Match(T__2);
						State = 61;
						numberExp();
						}
						break;
					case 3:
						{
						_localctx = new PositionExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_positionExp);
						State = 62;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 63;
						Match(T__3);
						State = 64;
						numberExp();
						}
						break;
					case 4:
						{
						_localctx = new PositionExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_positionExp);
						State = 65;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 66;
						Match(T__4);
						State = 67;
						numberExp();
						}
						break;
					}
					} 
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RoadExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext[] numberExp() {
			return GetRuleContexts<NumberExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp(int i) {
			return GetRuleContext<NumberExpContext>(i);
		}
		public RoadExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roadExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterRoadExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitRoadExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoadExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoadExpContext roadExp() {
		RoadExpContext _localctx = new RoadExpContext(Context, State);
		EnterRule(_localctx, 2, RULE_roadExp);
		int _la;
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				stringExp();
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 74;
					Match(T__5);
					State = 75;
					Match(T__6);
					State = 76;
					numberExp();
					State = 77;
					Match(T__7);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				Match(T__8);
				State = 82;
				Match(T__0);
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMBER) {
					{
					State = 83;
					numberExp();
					}
				}

				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 86;
					Match(T__9);
					State = 87;
					Match(T__6);
					State = 88;
					numberExp();
					State = 89;
					Match(T__7);
					}
				}

				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 93;
					Match(T__10);
					State = 94;
					Match(T__6);
					State = 95;
					numberExp();
					State = 96;
					Match(T__7);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 100;
				Match(T__8);
				State = 101;
				Match(T__0);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMBER) {
					{
					State = 102;
					numberExp();
					}
				}

				State = 105;
				Match(T__11);
				State = 106;
				Match(T__6);
				State = 107;
				numberExp();
				State = 108;
				Match(T__12);
				State = 109;
				numberExp();
				State = 111;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 110;
					Match(T__7);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113;
				Match(T__8);
				State = 114;
				Match(T__13);
				State = 115;
				Match(T__14);
				State = 116;
				Match(T__6);
				State = 117;
				numberExp();
				State = 118;
				Match(T__7);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 119;
					Match(T__9);
					State = 120;
					Match(T__6);
					State = 121;
					numberExp();
					State = 122;
					Match(T__7);
					}
				}

				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 126;
					Match(T__10);
					State = 127;
					Match(T__6);
					State = 128;
					numberExp();
					State = 129;
					Match(T__7);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 133;
				Match(T__8);
				State = 134;
				Match(T__13);
				State = 135;
				Match(T__14);
				State = 136;
				Match(T__6);
				State = 137;
				numberExp();
				State = 138;
				Match(T__7);
				State = 139;
				Match(T__11);
				State = 140;
				Match(T__6);
				State = 141;
				numberExp();
				State = 142;
				Match(T__12);
				State = 143;
				numberExp();
				State = 145;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 144;
					Match(T__7);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		public ConfigExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterConfigExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitConfigExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigExpContext configExp() {
		ConfigExpContext _localctx = new ConfigExpContext(Context, State);
		EnterRule(_localctx, 4, RULE_configExp);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				Match(T__16);
				State = 151;
				Match(T__6);
				State = 152;
				numberExp();
				State = 153;
				Match(T__7);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 155;
				Match(T__17);
				State = 156;
				Match(T__6);
				State = 157;
				numberExp();
				State = 158;
				Match(T__7);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160;
				Match(T__18);
				State = 161;
				Match(T__6);
				State = 162;
				numberExp();
				State = 163;
				Match(T__7);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 5);
				{
				State = 165;
				Match(T__19);
				State = 166;
				Match(T__6);
				State = 167;
				numberExp();
				State = 168;
				Match(T__7);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 6);
				{
				State = 170;
				Match(T__20);
				State = 171;
				Match(T__6);
				State = 172;
				numberExp();
				State = 173;
				Match(T__7);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 7);
				{
				State = 175;
				Match(T__21);
				State = 176;
				Match(T__6);
				State = 177;
				numberExp();
				State = 178;
				Match(T__7);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 8);
				{
				State = 180;
				Match(T__22);
				State = 181;
				Match(T__6);
				State = 182;
				numberExp();
				State = 183;
				Match(T__7);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 9);
				{
				State = 185;
				Match(T__23);
				State = 186;
				Match(T__6);
				State = 187;
				numberExp();
				State = 188;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EgoSettingExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		public EgoSettingExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_egoSettingExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterEgoSettingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitEgoSettingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEgoSettingExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EgoSettingExpContext egoSettingExp() {
		EgoSettingExpContext _localctx = new EgoSettingExpContext(Context, State);
		EnterRule(_localctx, 6, RULE_egoSettingExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(T__5);
			State = 193;
			Match(T__6);
			State = 194;
			numberExp();
			State = 195;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimulationSettingExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		public SimulationSettingExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simulationSettingExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterSimulationSettingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitSimulationSettingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimulationSettingExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimulationSettingExpContext simulationSettingExp() {
		SimulationSettingExpContext _localctx = new SimulationSettingExpContext(Context, State);
		EnterRule(_localctx, 8, RULE_simulationSettingExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__24);
			State = 198;
			Match(T__6);
			State = 199;
			numberExp();
			State = 200;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExpContext idExp() {
			return GetRuleContext<IdExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpContext functionExp() {
		FunctionExpContext _localctx = new FunctionExpContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			idExp();
			State = 203;
			Match(T__6);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14092796480L) != 0)) {
				{
				State = 204;
				argumentList();
				}
			}

			State = 207;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArrayExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArrayExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayExpContext arrayExp() {
		ArrayExpContext _localctx = new ArrayExpContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(T__25);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14092796480L) != 0)) {
				{
				State = 210;
				argumentList();
				}
			}

			State = 213;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			expression();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 216;
				Match(T__12);
				State = 217;
				expression();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmContext assignmentStm() {
		AssignmentStmContext _localctx = new AssignmentStmContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignmentStm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			variableExp();
			State = 224;
			Match(T__27);
			State = 225;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExpContext idExp() {
			return GetRuleContext<IdExpContext>(0);
		}
		public VariableExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpContext variableExp() {
		VariableExpContext _localctx = new VariableExpContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			idExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionExpContext positionExp() {
			return GetRuleContext<PositionExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoadExpContext roadExp() {
			return GetRuleContext<RoadExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayExpContext arrayExp() {
			return GetRuleContext<ArrayExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigExpContext configExp() {
			return GetRuleContext<ConfigExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EgoSettingExpContext egoSettingExp() {
			return GetRuleContext<EgoSettingExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimulationSettingExpContext simulationSettingExp() {
			return GetRuleContext<SimulationSettingExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpContext functionExp() {
			return GetRuleContext<FunctionExpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				stringExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				numberExp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				positionExp(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 232;
				roadExp();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 233;
				arrayExp();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 234;
				variableExp();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 235;
				configExp();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 236;
				egoSettingExp();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 237;
				simulationSettingExp();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 238;
				functionExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmContext assignmentStm() {
			return GetRuleContext<AssignmentStmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpContext functionExp() {
			return GetRuleContext<FunctionExpContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 241;
				assignmentStm();
				}
				break;
			case 2:
				{
				State = 242;
				functionExp();
				}
				break;
			}
			State = 245;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AWSIMScriptGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioContext scenario() {
		ScenarioContext _localctx = new ScenarioContext(Context, State);
		EnterRule(_localctx, 24, RULE_scenario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 247;
				statement();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 252;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AWSIMScriptGrammarParser.STRING, 0); }
		public StringExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpContext stringExp() {
		StringExpContext _localctx = new StringExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_stringExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AWSIMScriptGrammarParser.NUMBER, 0); }
		public NumberExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberExpContext numberExp() {
		NumberExpContext _localctx = new NumberExpContext(Context, State);
		EnterRule(_localctx, 28, RULE_numberExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AWSIMScriptGrammarParser.ID, 0); }
		public IdExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterIdExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitIdExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExpContext idExp() {
		IdExpContext _localctx = new IdExpContext(Context, State);
		EnterRule(_localctx, 30, RULE_idExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return positionExp_sempred((PositionExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool positionExp_sempred(PositionExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,261,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,1,0,1,0,1,0,3,0,37,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,55,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,5,0,69,8,0,10,0,12,0,72,9,0,1,1,1,1,1,1,1,1,1,1,1,1,
		3,1,80,8,1,1,1,1,1,1,1,3,1,85,8,1,1,1,1,1,1,1,1,1,1,1,3,1,92,8,1,1,1,1,
		1,1,1,1,1,1,1,3,1,99,8,1,1,1,1,1,1,1,3,1,104,8,1,1,1,1,1,1,1,1,1,1,1,1,
		1,3,1,112,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,125,8,1,
		1,1,1,1,1,1,1,1,1,1,3,1,132,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,3,1,146,8,1,3,1,148,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,191,8,2,
		1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,3,5,206,8,5,1,5,1,
		5,1,6,1,6,3,6,212,8,6,1,6,1,6,1,7,1,7,1,7,5,7,219,8,7,10,7,12,7,222,9,
		7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,240,8,10,1,11,1,11,3,11,244,8,11,1,11,1,11,1,12,4,12,249,8,12,
		11,12,12,12,250,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,0,1,0,16,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,0,288,0,54,1,0,0,0,2,147,
		1,0,0,0,4,190,1,0,0,0,6,192,1,0,0,0,8,197,1,0,0,0,10,202,1,0,0,0,12,209,
		1,0,0,0,14,215,1,0,0,0,16,223,1,0,0,0,18,227,1,0,0,0,20,239,1,0,0,0,22,
		243,1,0,0,0,24,248,1,0,0,0,26,254,1,0,0,0,28,256,1,0,0,0,30,258,1,0,0,
		0,32,33,6,0,-1,0,33,36,3,26,13,0,34,35,5,1,0,0,35,37,3,28,14,0,36,34,1,
		0,0,0,36,37,1,0,0,0,37,55,1,0,0,0,38,39,3,18,9,0,39,40,5,2,0,0,40,41,3,
		28,14,0,41,55,1,0,0,0,42,43,3,18,9,0,43,44,5,3,0,0,44,45,3,28,14,0,45,
		55,1,0,0,0,46,47,3,18,9,0,47,48,5,4,0,0,48,49,3,28,14,0,49,55,1,0,0,0,
		50,51,3,18,9,0,51,52,5,5,0,0,52,53,3,28,14,0,53,55,1,0,0,0,54,32,1,0,0,
		0,54,38,1,0,0,0,54,42,1,0,0,0,54,46,1,0,0,0,54,50,1,0,0,0,55,70,1,0,0,
		0,56,57,10,4,0,0,57,58,5,2,0,0,58,69,3,28,14,0,59,60,10,3,0,0,60,61,5,
		3,0,0,61,69,3,28,14,0,62,63,10,2,0,0,63,64,5,4,0,0,64,69,3,28,14,0,65,
		66,10,1,0,0,66,67,5,5,0,0,67,69,3,28,14,0,68,56,1,0,0,0,68,59,1,0,0,0,
		68,62,1,0,0,0,68,65,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,
		71,1,1,0,0,0,72,70,1,0,0,0,73,79,3,26,13,0,74,75,5,6,0,0,75,76,5,7,0,0,
		76,77,3,28,14,0,77,78,5,8,0,0,78,80,1,0,0,0,79,74,1,0,0,0,79,80,1,0,0,
		0,80,148,1,0,0,0,81,82,5,9,0,0,82,84,5,1,0,0,83,85,3,28,14,0,84,83,1,0,
		0,0,84,85,1,0,0,0,85,91,1,0,0,0,86,87,5,10,0,0,87,88,5,7,0,0,88,89,3,28,
		14,0,89,90,5,8,0,0,90,92,1,0,0,0,91,86,1,0,0,0,91,92,1,0,0,0,92,98,1,0,
		0,0,93,94,5,11,0,0,94,95,5,7,0,0,95,96,3,28,14,0,96,97,5,8,0,0,97,99,1,
		0,0,0,98,93,1,0,0,0,98,99,1,0,0,0,99,148,1,0,0,0,100,101,5,9,0,0,101,103,
		5,1,0,0,102,104,3,28,14,0,103,102,1,0,0,0,103,104,1,0,0,0,104,105,1,0,
		0,0,105,106,5,12,0,0,106,107,5,7,0,0,107,108,3,28,14,0,108,109,5,13,0,
		0,109,111,3,28,14,0,110,112,5,8,0,0,111,110,1,0,0,0,111,112,1,0,0,0,112,
		148,1,0,0,0,113,114,5,9,0,0,114,115,5,14,0,0,115,116,5,15,0,0,116,117,
		5,7,0,0,117,118,3,28,14,0,118,124,5,8,0,0,119,120,5,10,0,0,120,121,5,7,
		0,0,121,122,3,28,14,0,122,123,5,8,0,0,123,125,1,0,0,0,124,119,1,0,0,0,
		124,125,1,0,0,0,125,131,1,0,0,0,126,127,5,11,0,0,127,128,5,7,0,0,128,129,
		3,28,14,0,129,130,5,8,0,0,130,132,1,0,0,0,131,126,1,0,0,0,131,132,1,0,
		0,0,132,148,1,0,0,0,133,134,5,9,0,0,134,135,5,14,0,0,135,136,5,15,0,0,
		136,137,5,7,0,0,137,138,3,28,14,0,138,139,5,8,0,0,139,140,5,12,0,0,140,
		141,5,7,0,0,141,142,3,28,14,0,142,143,5,13,0,0,143,145,3,28,14,0,144,146,
		5,8,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,73,1,0,0,0,
		147,81,1,0,0,0,147,100,1,0,0,0,147,113,1,0,0,0,147,133,1,0,0,0,148,3,1,
		0,0,0,149,191,5,16,0,0,150,151,5,17,0,0,151,152,5,7,0,0,152,153,3,28,14,
		0,153,154,5,8,0,0,154,191,1,0,0,0,155,156,5,18,0,0,156,157,5,7,0,0,157,
		158,3,28,14,0,158,159,5,8,0,0,159,191,1,0,0,0,160,161,5,19,0,0,161,162,
		5,7,0,0,162,163,3,28,14,0,163,164,5,8,0,0,164,191,1,0,0,0,165,166,5,20,
		0,0,166,167,5,7,0,0,167,168,3,28,14,0,168,169,5,8,0,0,169,191,1,0,0,0,
		170,171,5,21,0,0,171,172,5,7,0,0,172,173,3,28,14,0,173,174,5,8,0,0,174,
		191,1,0,0,0,175,176,5,22,0,0,176,177,5,7,0,0,177,178,3,28,14,0,178,179,
		5,8,0,0,179,191,1,0,0,0,180,181,5,23,0,0,181,182,5,7,0,0,182,183,3,28,
		14,0,183,184,5,8,0,0,184,191,1,0,0,0,185,186,5,24,0,0,186,187,5,7,0,0,
		187,188,3,28,14,0,188,189,5,8,0,0,189,191,1,0,0,0,190,149,1,0,0,0,190,
		150,1,0,0,0,190,155,1,0,0,0,190,160,1,0,0,0,190,165,1,0,0,0,190,170,1,
		0,0,0,190,175,1,0,0,0,190,180,1,0,0,0,190,185,1,0,0,0,191,5,1,0,0,0,192,
		193,5,6,0,0,193,194,5,7,0,0,194,195,3,28,14,0,195,196,5,8,0,0,196,7,1,
		0,0,0,197,198,5,25,0,0,198,199,5,7,0,0,199,200,3,28,14,0,200,201,5,8,0,
		0,201,9,1,0,0,0,202,203,3,30,15,0,203,205,5,7,0,0,204,206,3,14,7,0,205,
		204,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,5,8,0,0,208,11,1,0,
		0,0,209,211,5,26,0,0,210,212,3,14,7,0,211,210,1,0,0,0,211,212,1,0,0,0,
		212,213,1,0,0,0,213,214,5,27,0,0,214,13,1,0,0,0,215,220,3,20,10,0,216,
		217,5,13,0,0,217,219,3,20,10,0,218,216,1,0,0,0,219,222,1,0,0,0,220,218,
		1,0,0,0,220,221,1,0,0,0,221,15,1,0,0,0,222,220,1,0,0,0,223,224,3,18,9,
		0,224,225,5,28,0,0,225,226,3,20,10,0,226,17,1,0,0,0,227,228,3,30,15,0,
		228,19,1,0,0,0,229,240,3,26,13,0,230,240,3,28,14,0,231,240,3,0,0,0,232,
		240,3,2,1,0,233,240,3,12,6,0,234,240,3,18,9,0,235,240,3,4,2,0,236,240,
		3,6,3,0,237,240,3,8,4,0,238,240,3,10,5,0,239,229,1,0,0,0,239,230,1,0,0,
		0,239,231,1,0,0,0,239,232,1,0,0,0,239,233,1,0,0,0,239,234,1,0,0,0,239,
		235,1,0,0,0,239,236,1,0,0,0,239,237,1,0,0,0,239,238,1,0,0,0,240,21,1,0,
		0,0,241,244,3,16,8,0,242,244,3,10,5,0,243,241,1,0,0,0,243,242,1,0,0,0,
		244,245,1,0,0,0,245,246,5,29,0,0,246,23,1,0,0,0,247,249,3,22,11,0,248,
		247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,252,1,
		0,0,0,252,253,5,0,0,1,253,25,1,0,0,0,254,255,5,30,0,0,255,27,1,0,0,0,256,
		257,5,32,0,0,257,29,1,0,0,0,258,259,5,33,0,0,259,31,1,0,0,0,21,36,54,68,
		70,79,84,91,98,103,111,124,131,145,147,190,205,211,220,239,243,250
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
