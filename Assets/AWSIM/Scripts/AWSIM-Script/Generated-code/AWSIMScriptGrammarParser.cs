//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/AWSIMScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AWSIMScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, STRING=27, SIGN=28, NUMBER=29, ID=30, WS=31, LINE_COMMENT=32;
	public const int
		RULE_positionExp = 0, RULE_roadExp = 1, RULE_configExp = 2, RULE_egoSettingExp = 3, 
		RULE_simulationSettingExp = 4, RULE_functionExp = 5, RULE_arrayExp = 6, 
		RULE_argumentList = 7, RULE_assignmentStm = 8, RULE_variableExp = 9, RULE_expression = 10, 
		RULE_statement = 11, RULE_scenario = 12, RULE_stringExp = 13, RULE_numberExp = 14, 
		RULE_idExp = 15;
	public static readonly string[] ruleNames = {
		"positionExp", "roadExp", "configExp", "egoSettingExp", "simulationSettingExp", 
		"functionExp", "arrayExp", "argumentList", "assignmentStm", "variableExp", 
		"expression", "statement", "scenario", "stringExp", "numberExp", "idExp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'at'", "'back'", "'forward'", "'left'", "'right'", "'max-velocity'", 
		"'('", "')'", "'change-lane'", "'cut-in'", "'cut-out'", "'aggressive-driving'", 
		"'acceleration'", "'deceleration'", "'delay-spawn'", "'delay-move'", "'delay-spawn-until-ego-move'", 
		"'delay-move-until-ego-move'", "'delay-spawn-until-ego-engaged'", "'delay-move-until-ego-engaged'", 
		"'saving-timeout'", "'['", "']'", "','", "'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "STRING", "SIGN", "NUMBER", "ID", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AWSIMScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AWSIMScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AWSIMScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AWSIMScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PositionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext[] variableExp() {
			return GetRuleContexts<VariableExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp(int i) {
			return GetRuleContext<VariableExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionExpContext positionExp() {
			return GetRuleContext<PositionExpContext>(0);
		}
		public PositionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionExpContext positionExp() {
		return positionExp(0);
	}

	private PositionExpContext positionExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PositionExpContext _localctx = new PositionExpContext(Context, _parentState);
		PositionExpContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_positionExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 33;
				stringExp();
				State = 39;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 34;
					Match(T__0);
					State = 37;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NUMBER:
						{
						State = 35;
						numberExp();
						}
						break;
					case ID:
						{
						State = 36;
						variableExp();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 41;
				variableExp();
				State = 42;
				Match(T__1);
				State = 45;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 43;
					numberExp();
					}
					break;
				case ID:
					{
					State = 44;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 47;
				variableExp();
				State = 48;
				Match(T__2);
				State = 51;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 49;
					numberExp();
					}
					break;
				case ID:
					{
					State = 50;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				State = 53;
				variableExp();
				State = 54;
				Match(T__3);
				State = 57;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 55;
					numberExp();
					}
					break;
				case ID:
					{
					State = 56;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				{
				State = 59;
				variableExp();
				State = 60;
				Match(T__4);
				State = 63;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 61;
					numberExp();
					}
					break;
				case ID:
					{
					State = 62;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 91;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new PositionExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_positionExp);
						State = 67;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 68;
						Match(T__1);
						State = 71;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NUMBER:
							{
							State = 69;
							numberExp();
							}
							break;
						case ID:
							{
							State = 70;
							variableExp();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 2:
						{
						_localctx = new PositionExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_positionExp);
						State = 73;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 74;
						Match(T__2);
						State = 77;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NUMBER:
							{
							State = 75;
							numberExp();
							}
							break;
						case ID:
							{
							State = 76;
							variableExp();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						_localctx = new PositionExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_positionExp);
						State = 79;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 80;
						Match(T__3);
						State = 83;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NUMBER:
							{
							State = 81;
							numberExp();
							}
							break;
						case ID:
							{
							State = 82;
							variableExp();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						_localctx = new PositionExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_positionExp);
						State = 85;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 86;
						Match(T__4);
						State = 89;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NUMBER:
							{
							State = 87;
							numberExp();
							}
							break;
						case ID:
							{
							State = 88;
							variableExp();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RoadExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public RoadExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roadExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterRoadExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitRoadExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoadExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoadExpContext roadExp() {
		RoadExpContext _localctx = new RoadExpContext(Context, State);
		EnterRule(_localctx, 2, RULE_roadExp);
		int _la;
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				stringExp();
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 97;
					Match(T__5);
					State = 98;
					Match(T__6);
					State = 101;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NUMBER:
						{
						State = 99;
						numberExp();
						}
						break;
					case ID:
						{
						State = 100;
						variableExp();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 103;
					Match(T__7);
					}
				}

				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				Match(T__8);
				State = 108;
				Match(T__6);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1753218624L) != 0)) {
					{
					State = 109;
					argumentList();
					}
				}

				State = 112;
				Match(T__7);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				Match(T__9);
				State = 114;
				Match(T__6);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1753218624L) != 0)) {
					{
					State = 115;
					argumentList();
					}
				}

				State = 118;
				Match(T__7);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 119;
				Match(T__10);
				State = 120;
				Match(T__6);
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1753218624L) != 0)) {
					{
					State = 121;
					argumentList();
					}
				}

				State = 124;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		public ConfigExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterConfigExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitConfigExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigExpContext configExp() {
		ConfigExpContext _localctx = new ConfigExpContext(Context, State);
		EnterRule(_localctx, 4, RULE_configExp);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				Match(T__11);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				Match(T__12);
				State = 129;
				Match(T__6);
				State = 132;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 130;
					numberExp();
					}
					break;
				case ID:
					{
					State = 131;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 134;
				Match(T__7);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				Match(T__13);
				State = 137;
				Match(T__6);
				State = 140;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 138;
					numberExp();
					}
					break;
				case ID:
					{
					State = 139;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 142;
				Match(T__7);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 4);
				{
				State = 144;
				Match(T__14);
				State = 145;
				Match(T__6);
				State = 148;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 146;
					numberExp();
					}
					break;
				case ID:
					{
					State = 147;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 150;
				Match(T__7);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152;
				Match(T__15);
				State = 153;
				Match(T__6);
				State = 156;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 154;
					numberExp();
					}
					break;
				case ID:
					{
					State = 155;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158;
				Match(T__7);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 6);
				{
				State = 160;
				Match(T__16);
				State = 161;
				Match(T__6);
				State = 164;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 162;
					numberExp();
					}
					break;
				case ID:
					{
					State = 163;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 166;
				Match(T__7);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 7);
				{
				State = 168;
				Match(T__17);
				State = 169;
				Match(T__6);
				State = 172;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 170;
					numberExp();
					}
					break;
				case ID:
					{
					State = 171;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 174;
				Match(T__7);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 8);
				{
				State = 176;
				Match(T__18);
				State = 177;
				Match(T__6);
				State = 180;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 178;
					numberExp();
					}
					break;
				case ID:
					{
					State = 179;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 182;
				Match(T__7);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 9);
				{
				State = 184;
				Match(T__19);
				State = 185;
				Match(T__6);
				State = 188;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 186;
					numberExp();
					}
					break;
				case ID:
					{
					State = 187;
					variableExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 190;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EgoSettingExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		public EgoSettingExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_egoSettingExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterEgoSettingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitEgoSettingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEgoSettingExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EgoSettingExpContext egoSettingExp() {
		EgoSettingExpContext _localctx = new EgoSettingExpContext(Context, State);
		EnterRule(_localctx, 6, RULE_egoSettingExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__5);
			State = 195;
			Match(T__6);
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 196;
				numberExp();
				}
				break;
			case ID:
				{
				State = 197;
				variableExp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 200;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimulationSettingExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		public SimulationSettingExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simulationSettingExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterSimulationSettingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitSimulationSettingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimulationSettingExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimulationSettingExpContext simulationSettingExp() {
		SimulationSettingExpContext _localctx = new SimulationSettingExpContext(Context, State);
		EnterRule(_localctx, 8, RULE_simulationSettingExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(T__20);
			State = 203;
			Match(T__6);
			State = 204;
			numberExp();
			State = 205;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExpContext idExp() {
			return GetRuleContext<IdExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpContext functionExp() {
		FunctionExpContext _localctx = new FunctionExpContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			idExp();
			State = 208;
			Match(T__6);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1753218624L) != 0)) {
				{
				State = 209;
				argumentList();
				}
			}

			State = 212;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArrayExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArrayExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayExpContext arrayExp() {
		ArrayExpContext _localctx = new ArrayExpContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(T__21);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1753218624L) != 0)) {
				{
				State = 215;
				argumentList();
				}
			}

			State = 218;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			expression();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23) {
				{
				{
				State = 221;
				Match(T__23);
				State = 222;
				expression();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmContext assignmentStm() {
		AssignmentStmContext _localctx = new AssignmentStmContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignmentStm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			variableExp();
			State = 229;
			Match(T__24);
			State = 230;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExpContext idExp() {
			return GetRuleContext<IdExpContext>(0);
		}
		public VariableExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpContext variableExp() {
		VariableExpContext _localctx = new VariableExpContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			idExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionExpContext positionExp() {
			return GetRuleContext<PositionExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoadExpContext roadExp() {
			return GetRuleContext<RoadExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayExpContext arrayExp() {
			return GetRuleContext<ArrayExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigExpContext configExp() {
			return GetRuleContext<ConfigExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EgoSettingExpContext egoSettingExp() {
			return GetRuleContext<EgoSettingExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimulationSettingExpContext simulationSettingExp() {
			return GetRuleContext<SimulationSettingExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpContext functionExp() {
			return GetRuleContext<FunctionExpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				stringExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				numberExp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236;
				positionExp(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237;
				roadExp();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 238;
				arrayExp();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 239;
				variableExp();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 240;
				configExp();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 241;
				egoSettingExp();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 242;
				simulationSettingExp();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 243;
				functionExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmContext assignmentStm() {
			return GetRuleContext<AssignmentStmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpContext functionExp() {
			return GetRuleContext<FunctionExpContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 246;
				assignmentStm();
				}
				break;
			case 2:
				{
				State = 247;
				functionExp();
				}
				break;
			}
			State = 250;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AWSIMScriptGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioContext scenario() {
		ScenarioContext _localctx = new ScenarioContext(Context, State);
		EnterRule(_localctx, 24, RULE_scenario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 252;
				statement();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 257;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AWSIMScriptGrammarParser.STRING, 0); }
		public StringExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpContext stringExp() {
		StringExpContext _localctx = new StringExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_stringExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AWSIMScriptGrammarParser.NUMBER, 0); }
		public NumberExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberExpContext numberExp() {
		NumberExpContext _localctx = new NumberExpContext(Context, State);
		EnterRule(_localctx, 28, RULE_numberExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AWSIMScriptGrammarParser.ID, 0); }
		public IdExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterIdExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitIdExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExpContext idExp() {
		IdExpContext _localctx = new IdExpContext(Context, State);
		EnterRule(_localctx, 30, RULE_idExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return positionExp_sempred((PositionExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool positionExp_sempred(PositionExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,32,266,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,1,0,1,0,1,0,1,0,3,0,38,8,0,3,0,40,8,0,1,0,1,0,1,0,1,0,3,
		0,46,8,0,1,0,1,0,1,0,1,0,3,0,52,8,0,1,0,1,0,1,0,1,0,3,0,58,8,0,1,0,1,0,
		1,0,1,0,3,0,64,8,0,3,0,66,8,0,1,0,1,0,1,0,1,0,3,0,72,8,0,1,0,1,0,1,0,1,
		0,3,0,78,8,0,1,0,1,0,1,0,1,0,3,0,84,8,0,1,0,1,0,1,0,1,0,3,0,90,8,0,5,0,
		92,8,0,10,0,12,0,95,9,0,1,1,1,1,1,1,1,1,1,1,3,1,102,8,1,1,1,1,1,3,1,106,
		8,1,1,1,1,1,1,1,3,1,111,8,1,1,1,1,1,1,1,1,1,3,1,117,8,1,1,1,1,1,1,1,1,
		1,3,1,123,8,1,1,1,3,1,126,8,1,1,2,1,2,1,2,1,2,1,2,3,2,133,8,2,1,2,1,2,
		1,2,1,2,1,2,1,2,3,2,141,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,149,8,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,157,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,165,8,2,1,2,
		1,2,1,2,1,2,1,2,1,2,3,2,173,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,181,8,2,1,
		2,1,2,1,2,1,2,1,2,1,2,3,2,189,8,2,1,2,1,2,3,2,193,8,2,1,3,1,3,1,3,1,3,
		3,3,199,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,3,5,211,8,5,1,5,1,
		5,1,6,1,6,3,6,217,8,6,1,6,1,6,1,7,1,7,1,7,5,7,224,8,7,10,7,12,7,227,9,
		7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,245,8,10,1,11,1,11,3,11,249,8,11,1,11,1,11,1,12,4,12,254,8,12,
		11,12,12,12,255,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,0,1,0,16,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,0,306,0,65,1,0,0,0,2,125,
		1,0,0,0,4,192,1,0,0,0,6,194,1,0,0,0,8,202,1,0,0,0,10,207,1,0,0,0,12,214,
		1,0,0,0,14,220,1,0,0,0,16,228,1,0,0,0,18,232,1,0,0,0,20,244,1,0,0,0,22,
		248,1,0,0,0,24,253,1,0,0,0,26,259,1,0,0,0,28,261,1,0,0,0,30,263,1,0,0,
		0,32,33,6,0,-1,0,33,39,3,26,13,0,34,37,5,1,0,0,35,38,3,28,14,0,36,38,3,
		18,9,0,37,35,1,0,0,0,37,36,1,0,0,0,38,40,1,0,0,0,39,34,1,0,0,0,39,40,1,
		0,0,0,40,66,1,0,0,0,41,42,3,18,9,0,42,45,5,2,0,0,43,46,3,28,14,0,44,46,
		3,18,9,0,45,43,1,0,0,0,45,44,1,0,0,0,46,66,1,0,0,0,47,48,3,18,9,0,48,51,
		5,3,0,0,49,52,3,28,14,0,50,52,3,18,9,0,51,49,1,0,0,0,51,50,1,0,0,0,52,
		66,1,0,0,0,53,54,3,18,9,0,54,57,5,4,0,0,55,58,3,28,14,0,56,58,3,18,9,0,
		57,55,1,0,0,0,57,56,1,0,0,0,58,66,1,0,0,0,59,60,3,18,9,0,60,63,5,5,0,0,
		61,64,3,28,14,0,62,64,3,18,9,0,63,61,1,0,0,0,63,62,1,0,0,0,64,66,1,0,0,
		0,65,32,1,0,0,0,65,41,1,0,0,0,65,47,1,0,0,0,65,53,1,0,0,0,65,59,1,0,0,
		0,66,93,1,0,0,0,67,68,10,4,0,0,68,71,5,2,0,0,69,72,3,28,14,0,70,72,3,18,
		9,0,71,69,1,0,0,0,71,70,1,0,0,0,72,92,1,0,0,0,73,74,10,3,0,0,74,77,5,3,
		0,0,75,78,3,28,14,0,76,78,3,18,9,0,77,75,1,0,0,0,77,76,1,0,0,0,78,92,1,
		0,0,0,79,80,10,2,0,0,80,83,5,4,0,0,81,84,3,28,14,0,82,84,3,18,9,0,83,81,
		1,0,0,0,83,82,1,0,0,0,84,92,1,0,0,0,85,86,10,1,0,0,86,89,5,5,0,0,87,90,
		3,28,14,0,88,90,3,18,9,0,89,87,1,0,0,0,89,88,1,0,0,0,90,92,1,0,0,0,91,
		67,1,0,0,0,91,73,1,0,0,0,91,79,1,0,0,0,91,85,1,0,0,0,92,95,1,0,0,0,93,
		91,1,0,0,0,93,94,1,0,0,0,94,1,1,0,0,0,95,93,1,0,0,0,96,105,3,26,13,0,97,
		98,5,6,0,0,98,101,5,7,0,0,99,102,3,28,14,0,100,102,3,18,9,0,101,99,1,0,
		0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,104,5,8,0,0,104,106,1,0,0,0,105,
		97,1,0,0,0,105,106,1,0,0,0,106,126,1,0,0,0,107,108,5,9,0,0,108,110,5,7,
		0,0,109,111,3,14,7,0,110,109,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,
		126,5,8,0,0,113,114,5,10,0,0,114,116,5,7,0,0,115,117,3,14,7,0,116,115,
		1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,126,5,8,0,0,119,120,5,11,0,
		0,120,122,5,7,0,0,121,123,3,14,7,0,122,121,1,0,0,0,122,123,1,0,0,0,123,
		124,1,0,0,0,124,126,5,8,0,0,125,96,1,0,0,0,125,107,1,0,0,0,125,113,1,0,
		0,0,125,119,1,0,0,0,126,3,1,0,0,0,127,193,5,12,0,0,128,129,5,13,0,0,129,
		132,5,7,0,0,130,133,3,28,14,0,131,133,3,18,9,0,132,130,1,0,0,0,132,131,
		1,0,0,0,133,134,1,0,0,0,134,135,5,8,0,0,135,193,1,0,0,0,136,137,5,14,0,
		0,137,140,5,7,0,0,138,141,3,28,14,0,139,141,3,18,9,0,140,138,1,0,0,0,140,
		139,1,0,0,0,141,142,1,0,0,0,142,143,5,8,0,0,143,193,1,0,0,0,144,145,5,
		15,0,0,145,148,5,7,0,0,146,149,3,28,14,0,147,149,3,18,9,0,148,146,1,0,
		0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,151,5,8,0,0,151,193,1,0,0,0,152,
		153,5,16,0,0,153,156,5,7,0,0,154,157,3,28,14,0,155,157,3,18,9,0,156,154,
		1,0,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,159,5,8,0,0,159,193,1,0,0,
		0,160,161,5,17,0,0,161,164,5,7,0,0,162,165,3,28,14,0,163,165,3,18,9,0,
		164,162,1,0,0,0,164,163,1,0,0,0,165,166,1,0,0,0,166,167,5,8,0,0,167,193,
		1,0,0,0,168,169,5,18,0,0,169,172,5,7,0,0,170,173,3,28,14,0,171,173,3,18,
		9,0,172,170,1,0,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,175,5,8,0,0,175,
		193,1,0,0,0,176,177,5,19,0,0,177,180,5,7,0,0,178,181,3,28,14,0,179,181,
		3,18,9,0,180,178,1,0,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,183,5,8,0,
		0,183,193,1,0,0,0,184,185,5,20,0,0,185,188,5,7,0,0,186,189,3,28,14,0,187,
		189,3,18,9,0,188,186,1,0,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,191,5,
		8,0,0,191,193,1,0,0,0,192,127,1,0,0,0,192,128,1,0,0,0,192,136,1,0,0,0,
		192,144,1,0,0,0,192,152,1,0,0,0,192,160,1,0,0,0,192,168,1,0,0,0,192,176,
		1,0,0,0,192,184,1,0,0,0,193,5,1,0,0,0,194,195,5,6,0,0,195,198,5,7,0,0,
		196,199,3,28,14,0,197,199,3,18,9,0,198,196,1,0,0,0,198,197,1,0,0,0,199,
		200,1,0,0,0,200,201,5,8,0,0,201,7,1,0,0,0,202,203,5,21,0,0,203,204,5,7,
		0,0,204,205,3,28,14,0,205,206,5,8,0,0,206,9,1,0,0,0,207,208,3,30,15,0,
		208,210,5,7,0,0,209,211,3,14,7,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,
		1,0,0,0,212,213,5,8,0,0,213,11,1,0,0,0,214,216,5,22,0,0,215,217,3,14,7,
		0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,5,23,0,0,219,
		13,1,0,0,0,220,225,3,20,10,0,221,222,5,24,0,0,222,224,3,20,10,0,223,221,
		1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,15,1,0,0,0,
		227,225,1,0,0,0,228,229,3,18,9,0,229,230,5,25,0,0,230,231,3,20,10,0,231,
		17,1,0,0,0,232,233,3,30,15,0,233,19,1,0,0,0,234,245,3,26,13,0,235,245,
		3,28,14,0,236,245,3,0,0,0,237,245,3,2,1,0,238,245,3,12,6,0,239,245,3,18,
		9,0,240,245,3,4,2,0,241,245,3,6,3,0,242,245,3,8,4,0,243,245,3,10,5,0,244,
		234,1,0,0,0,244,235,1,0,0,0,244,236,1,0,0,0,244,237,1,0,0,0,244,238,1,
		0,0,0,244,239,1,0,0,0,244,240,1,0,0,0,244,241,1,0,0,0,244,242,1,0,0,0,
		244,243,1,0,0,0,245,21,1,0,0,0,246,249,3,16,8,0,247,249,3,10,5,0,248,246,
		1,0,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,251,5,26,0,0,251,23,1,0,0,
		0,252,254,3,22,11,0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,
		256,1,0,0,0,256,257,1,0,0,0,257,258,5,0,0,1,258,25,1,0,0,0,259,260,5,27,
		0,0,260,27,1,0,0,0,261,262,5,29,0,0,262,29,1,0,0,0,263,264,5,30,0,0,264,
		31,1,0,0,0,35,37,39,45,51,57,63,65,71,77,83,89,91,93,101,105,110,116,122,
		125,132,140,148,156,164,172,180,188,192,198,210,216,225,244,248,255
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
